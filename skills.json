{"generate_news_report":"The skill to generate a news report involves the ability to search for recent news articles on a given topic, compile important details from the sources, and organize those details into a coherent and informative report. It may also include the capacity to summarize and provide critical commentary on the information.","generate_new_tool":"### Recipe for Generating a New Tool:\n\n1. **Create a New File**:\n   - Navigate to the `{app_dir}/agent/tools/` directory.\n   - Create a new JavaScript file named `<name>.js` where `<name>` is the name of your new tool.\n\n2. **Examine an Existing Tool for Metadata Format**:\n   - Open an existing tool file like `getConfigValue.js` or `setConfigValue.js` from the same directory.\n   - Note how the metadata is written at the beginning of the file, including tags like `@toolType`, `@hasSideEffect`, `@param`, and `@returns`.\n\n3. **Generate Appropriate Metadata**:\n   - At the top of your new file, write a comment block to include your metadata.\n   - Define the purpose of the tool, its side effects (if any), the parameters it accepts, and what it returns.\n\n4. **Implement the Tool Function**:\n   - Write the JavaScript function that encapsulates the logic of your new tool within the new file.\n   - Make sure to match the parameters and return types as specified in your metadata.\n\n5. **Export the Tool**:\n   - At the bottom of your new file, add an export statement for your tool function.\n   - Also, include a schema for the function if your tool needs to be discoverable or adheres to a specific interface.\n\n### Template for a New Tool File:\nHere's a template reflecting these steps:\n\n```javascript\nconst fs = require('fs');\nconst path = require('path');\n\n/**\n * Description of your new tool.\n *\n * @toolType [utility|data-manipulation|network|...]\n * @hasSideEffect [true|false]\n * @param {ParamType} paramName - Description of the parameter.\n * @returns {ReturnType} Description of the return value.\n */\nfunction newToolFunction(paramName) {\n  // Your implementation here.\n  return; // Return the appropriate value.\n}\n\n// Add more functions or helpers if needed.\n\nmodule.exports = {\n  newToolFunction, // export your main tool function\n  // Optionally include a schema or any additional functions/helpers.\n};\n```\n\nBy following these steps and using this template as a starting point, you can create a well-structured tool file that contains the necessary metadata and function implementation for any new tool you wish to add to your suite.\n\nPlease let me know if you need further details or help automating any part of this process.","generate_html_layout":"# Generate HTML Layout for User Interface\n\nGiven a user interface description - list of user interface fields and actions - this directive will generate the optimal layout for the field. It will return HTML with inline styling that lays out the user interface fields.\n\n## Input\n\n- `uiDescription` (Required): An array of UI fields and actions descriptions. Each description should have the following properties:\n  - `type`: The type of the UI field (e.g., \"text\", \"button\", etc.)\n  - `label`: The label for the UI element\n  - `action`: An optional action associated with the UI element\n\n## Execution\n\n1. Parse the `uiDescription` input to understand the kind of fields and actions described.\n2. For each UI element described, generate the appropriate HTML tag(s). These should include necessary attributes such as `id`, `class`, and `style`.\n   - The style should be inline, assigning appropriate values to CSS properties such as `width`, `height`, `margin`, and `padding` to ensure optimal layouting.\n   - The placement of each UI element should be determined such that it provides an enjoyable and practical user experience.\n3. Combine all generated HTML tags into a single string of HTML code, ensuring that they are structured in a way that maintains the order and relationships described in the input.\n\n## Output\n\n- `html` (Required): The generated HTML code. This should contain all UI elements described in the input, laid out optimally using inline styles.\n\n## Examples\n\n__Input:__\n\n`[{\"type\": \"text\", \"label\": \"First Name\"}, {\"type\": \"text\", \"label\": \"Last Name\"}, {\"type\": \"button\", \"label\": \"Submit\", \"action\": \"submitForm\"}]`\n\n__Output:__\n\n`<div><label for='first-name'>First Name</label><input id='first-name' type='text' style='width: 100%; margin: 5px 0;'></div><div><label for='last-name'>Last Name</label><input id='last-name' type='text' style='width: 100%; margin: 5px 0;'></div><div><button id='submit' style='width: 100%; margin-top: 10px;' onclick='submitForm()'>Submit</button></div>`"}